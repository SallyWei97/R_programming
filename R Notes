# Introduction to R programming language and data analysis----------------------
# Creater: Wei Zheng
# This note is created based on a video, Introduction to R programming language 
# and data analysis, on the website of Bilibili (id: 基因学院).

# P1-6    Introduction of R-----------------------------------------------------

getwd()
# 看路径
setwd(dir="")
修改保存路径

df <- read.table("dataname.cvs", sep=",", header = T)
# df将数据文件命名
# read.table()读写Excel数据文件
# sep=","来表示空格用字符

table(df$supp, df$dose)
# table()用于制作新表格，$用于统计总量
# aggregate()测量均值、方差等

# 内置数据集 粉色
# 数据框 表格图案
# 函数 蓝色
# tab键自动补齐（第一个）

# 快捷键
# Ctrl+↑，调出历史记录（可输入条件后再执行，即可查找符合条件的历史记录
# ESC中断当前操作
# Alt+shift+k，调出所有快捷操作


# P7-14   R的安装--------------------------------------------------------------

# - 用 "<-" 赋值给一个局部变量，不建议使用=
# - 用 "<<-" 赋值给一个全局变量
# - "<-"的快捷键：alt + - 

mean()
# mean(1:5) -> 3 求1-5的平均数
# mean(1,2,3,4,5) -> 1 只输出第一个向量（1）的平均数，后面为无效输入
# mean(c(1,2,3,4,5)) -> 3 增加的c()帮助识别一串数字

ls()
# 列出所有变量

ls.str()
# 列出所有变量的详细信息

str()
# 括号里填写变量名，输出变量的信息

rm()
# 清除某个变量

rm(list = ls())
# 消除所有变量

history()
# 唤出历史

# 清空界面快捷键 Ctrl+L


save.image()
# 保存工作空间（图片不会自动保存）

# R拓展包安装
# - 在线
#   通过访问镜像站点
#   拓展包的名字都需要被引号
    install.package()
    # eg. install.package("vcd")
    install.packages()
    # eg. install.packages(c("a", "b", "c"))
# - 离线（源代码）
#   镜像站点下载源代码
#   需要注意包之间的依赖关系（通常推荐在线安装）

require()
# 加载包（eg. require(vcd)）
library()
# 加载包
# library和require都可以载入包，但二者存在区别。
# 一个函数中，如果一个包不存在，执行到library将会停止执行，require则会继续执行

help(package="")
# 查询该包的指南(eg. help(package="vcd"))
library(help="")
# 查询包的基础信息，如数据集(eg. library(help=""))
# eg. Baseball (vcd自带数据集）

detach() # eg. detach("package:vcd")
# 从内存内移除，重新require即可使用
remove.packages() # eg. remove.packages("vcd")
# 彻底删除包

installed.packages()
# 可用于拓展包移植，
# eg. 
Rpack <- installed.packages()[,1]
# 创建变量Rpack，为当前所有已安装包的名称（第一列）
save(Rpack,file="Rpack.Rdata")
# 保存变量Rpack
load("C:/Users/three/Documents/Rpack.Rdata")
# 加载该变量（需要移植的新电脑）
Rpack
# 查看该变量（需要移植的新电脑）
for (x in Rpack) install.packages(x)
# 使用循环来安装Rpack中所有包（需要移植的新电脑）

# ?函数名（一个问号查函数）eg. 
?mean
# example（）查看函数的example eg.
example(mean)
# vignette() 查看包的说明(部分包没有该格式的intro） eg.
vignette("xts")
# ??函数名（两个问好查拓展包）eg. ??heatmap

apropos()
# 查询括号内的关键字 eg.
apprpos("sum",mod="function")
# 查询关键字为sum的函数

RsiteSearch()
# 官网查询关键字
# 可使用rseek.org网站，需要vpn

# 数据通常行是观测值，列是变量值

# P15 内置数据集 --------------------------------------------------------------

# 内置数据集都存在datasets包
data()
#  输出所有包含的数据集
rivers
eg. 内置数据集-北美河流长度
data("")
#  输出选定数据集 eg. data("rivers")

# 网盘有数据集整理
class()
# 查看数据集的类型(向量、因子、矩阵等

heatmap()
# 绘制数据集的热力图 eg. heatmap(volcano)

data(package=.packages(all.available=TRUE))
# 查找所有可用数据集

data.frame()
# 制作数据框

data(database,package="程序包"）
# 只加载拓展包里面的数据集，忽略包

# P16-26  编程基础概念---------------------------------------

# 数据类型
# 数值，字符串，逻辑型（布尔），日期型

# 对象
# eg. 常量，数据结构，函数，图形

# 数据结构
# eg. 向量，标量；矩阵；数组；列表；数据框；因子；时间序列

# 1.1 向量 vector---------------------------------------
# 存储数值型字符型等数据的一维数组
# 用函数c()来创建向量（数组）eg.
x <- c(1,2,20,21,22,31,24,44,25,32,27)
y <- c("one","two")
z <- c(TRUE,F,T,F)
# !!字符串必须＋“”
# !!逻辑型必须all大写
c(1:100)
# 1-100等差数列
seq (from=1,to=100,by=4)
seq (from=1,to=100,length.out=8)
# by为等差数列的差，length.out为等差数列个数
rep(x,5)
rep(x,each=5，times=5)
# 重复函数，x可为标量、向量，each是单个重复次数，times是总体重复次数
a <- c(1,2,"three")
# 1,2被转化为字符串
model()
# 查看向量的类型
# ！！R是向量化编程，优势是避免使用循环
> x <- c(1,2)
> y <- c(3,4)
> x*3+y
[1]  6 10
> x[x<2]
[1] 1
> rep(x,c(2,3))
[1] 1 1 2 2 2


# 1.2 向量索引 ---------------------------------------
# 正负整数索引；逻辑向量索引；名称索引

# 正负整数索引
> x <- c(1:100)
> length(x)
[1] 100
> x[10]
[1] 10
> x[-66] # 不显示第66个数
 [1]   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
[18]  18  19  20  21  22  23  24  25  26  27  28  29  30  31  32  33  34
[35]  35  36  37  38  39  40  41  42  43  44  45  46  47  48  49  50  51
[52]  52  53  54  55  56  57  58  59  60  61  62  63  64  65  67  68  69
[69]  70  71  72  73  74  75  76  77  78  79  80  81  82  83  84  85  86
[86]  87  88  89  90  91  92  93  94  95  96  97  98  99 100
> x[c(-10:-90)]
 [1]   1   2   3   4   5   6   7   8   9  91  92  93  94  95  96  97  98
[18]  99 100

# 逻辑索引
> y <- c(1:10)
> y[c(T,F,F,T,T)]
[1]  1  4  5  6  9 10
> y[c(T,F,F,T,T,F,F,T,T,F,F,T,T)]
[1]  1  4  5  8  9 NA NA #NA缺失值
> y[y>7]
[1]  8  9 10
> y[y>6 & y<9]
[1] 7 8
> z <- c("one","two","three","four","five")
> "one" %in% z #判断字符串“one”是否是z的元素，
[1] TRUE
> z[z %in% c("one","five")] #相当于 y[c(T,F,F,F,T)]
[1] "one"  "five"

# 名称索引
> names(y) <- c("one","two","three","four","five","six","seven","eight","nine","ten")
> y
  one   two three  four  five   six seven eight  nine   ten 
    1     2     3     4     5     6     7     8     9    10 
> y["two"]
two 
  2
# 通常用于数组等情景，第一行相当于Excel的列名  
  
# 向量修改-------------------------------------------------------------
> x[101] <- 1000
> x
  [1]    1    2    3    4    5    6    7    8    9   10   11   12   13
 [14]   14   15   16   17   18   19   20   21   22   23   24   25   26
 [27]   27   28   29   30   31   32   33   34   35   36   37   38   39
 [40]   40   41   42   43   44   45   46   47   48   49   50   51   52
 [53]   53   54   55   56   57   58   59   60   61   62   63   64   65
 [66]   66   67   68   69   70   71   72   73   74   75   76   77   78
 [79]   79   80   81   82   83   84   85   86   87   88   89   90   91
 [92]   92   93   94   95   96   97   98   99  100 1000
# 赋值单个向量

> b <- 1:3
> b[c(4:10)] <- c(1,1,2,2,3,3,4)
> b
 [1] 1 2 3 1 1 2 2 3 3 4
# 批量赋值
> b[13] <- 11
> b
 [1]  1  2  3  1  1  2  2  3  3  4 NA NA 11
# 中间为缺失值

> append(x = b,values = 99,after = 5)
 [1]  1  2  3  1  1 99  2  2  3  3  4 NA NA 11
# 插入向量，tab键调出函数参数

rm()
# 删除整个向量
> y <- y[-c(3:5)]
> y
  one   two   six seven eight  nine   ten 
    1     2     6     7     8     9    10 
# 删除某些向量

> y["six"] <- 99
> y
  one   two   six seven eight  nine   ten 
    1     2    99     7     8     9    10 
# 修改某个向量值

# 向量计算------------------------------------------------------------
1.
> x <- 1:5
> x <- x*2
> x
[1]  2  4  6  8 10
> y <- seq(1,20,length.out =5)
> x*y
[1]   2  23  63 122 200
> x**y # 幂运算
[1] 2.000000e+00 2.896309e+03 1.481113e+08 5.917282e+13 1.000000e+20
> y%%x # 求余
[1] 1.00 1.75 4.50 7.25 0.00
> y%/%x # 整除
[1] 0 1 1 1 2
> z <- 1:3
> x+z
[1]  3  6  9  9 12
Warning message: # 长向量个数不是短向量的整数倍
In x + z : longer object length is not a multiple of shorter object length
# 向量的加减乘除

2.
> c(1:3) %in% x
[1] FALSE  TRUE FALSE
# 包含运算符

3.
> x==y
[1] FALSE FALSE FALSE FALSE FALSE
# 等于判断符

4.
> a <- -5:5
> abs(a)
 [1] 5 4 3 2 1 0 1 2 3 4 5
# 取绝对值
> sqrt(a)
 [1]      NaN      NaN      NaN      NaN      NaN 0.000000 1.000000
 [8] 1.414214 1.732051 2.000000 2.236068
# 计算平方根
> log(x = a,base = 2)
 [1]      NaN      NaN      NaN      NaN      NaN     -Inf 0.000000
 [8] 1.000000 1.584963 2.000000 2.321928
# 计算对数
> exp(a)
 [1] 6.737947e-03 1.831564e-02 4.978707e-02 1.353353e-01 3.678794e-01
 [6] 1.000000e+00 2.718282e+00 7.389056e+00 2.008554e+01 5.459815e+01
[11] 1.484132e+02
# 以e为底的指数函数
> ceiling(c(1.22,2.33))
[1] 2 3
# 向上取整
> floor(c(1.22,2.33))
[1] 1 2
# 向下取整
> trunc(c(1.22,2.33))
[1] 1 2
# 去除小数点
> round(c(1.21,2.88,2.18),digits = 1)
[1] 1.2 2.9 2.2
> signif(c(1.21,2.88,2.18),digits=1)
[1] 1 3 2
# 四舍五入 round：digits为小数点后几位。

5.
sin()
cos()
...
# 三角函数计算

6. 统计函数
> vec <- 1:100
> sum(vec)
[1] 5050
> max(vec)
[1] 100
> min(vec)
[1] 1
> range(vec) # 最大值&最小值
[1]   1 100
> mean(vec)
[1] 50.5
> var(vec) # 方差
[1] 841.6667
> sd(vec) # 标准差
[1] 29.01149
> prod(vec) #连乘
[1] 9.332622e+157
> median(vec)
[1] 50.5
> quantile(vec) # 分位数
    0%    25%    50%    75%   100% 
  1.00  25.75  50.50  75.25 100.00 
> quantile(vec,c(0.1,0.8))
 10%  80% 
10.9 80.2 

7.查找向量索引值
> t <- c(1,3,5,7,9,11,13)
> which.max(t)
[1] 7
> which(t==7)
[1] 4
> which(t<mean(t))
[1] 1 2 3
> t[which(t<10)] # 先输出符合条件的索引值，再按索引值输出向量
[1] 1 3 5 7 9

# 2 矩阵 --------------------------------------------------

1.构建矩阵
1.1 matrix
> m <- matrix(1:30,5,6) # 5是nrow行数，6是ncol列数
> m
     [,1] [,2] [,3] [,4] [,5] [,6]
[1,]    1    6   11   16   21   26
[2,]    2    7   12   17   22   27
[3,]    3    8   13   18   23   28
[4,]    4    9   14   19   24   29
[5,]    5   10   15   20   25   30
# 行列数要与向量总数匹配
>  m <- matrix(1:30,5,byrow = T) # 按行分配
> m
     [,1] [,2] [,3] [,4] [,5] [,6]
[1,]    1    2    3    4    5    6
[2,]    7    8    9   10   11   12
[3,]   13   14   15   16   17   18
[4,]   19   20   21   22   23   24
[5,]   25   26   27   28   29   30
> m <- matrix(1:30,5,byrow = F)
> m
     [,1] [,2] [,3] [,4] [,5] [,6]
[1,]    1    6   11   16   21   26
[2,]    2    7   12   17   22   27
[3,]    3    8   13   18   23   28
[4,]    4    9   14   19   24   29
[5,]    5   10   15   20   25   30
# 按列分配
> rnames <- c("R1","R2","R3","R4","R5")
> cnames <- c("C1","C2","C3","C4","C5","C6")
> dimnames(m) <- list(rnames,cnames)
> m
   C1 C2 C3 C4 C5 C6
R1  1  6 11 16 21 26
R2  2  7 12 17 22 27
R3  3  8 13 18 23 28
R4  4  9 14 19 24 29
R5  5 10 15 20 25 30
# 给矩阵行列命名

1.2 dim
> x <- 1:8
> dim(x) <- c(2,2,2)
> x
, , 1

     [,1] [,2]
[1,]    1    3
[2,]    2    4

, , 2

     [,1] [,2]
[1,]    5    7
[2,]    6    8
# dim定义维度，可以是n维

1.3 array
> dim1 <- c("A1","A2")
> dim2 <- c("B1","B2","B3")
> dim3 <- c("C1","C2","C3","C4")
> h <- array(1:24,c(2,3,4),dimnames = list(dim1,dim2,dim3)) # 1:24-矩阵的值; c(2,3,4)-矩阵的维度; dimnames-矩阵的维度名称
> h
, , C1

   B1 B2 B3
A1  1  3  5
A2  2  4  6

, , C2

   B1 B2 B3
A1  7  9 11
A2  8 10 12

, , C3

   B1 B2 B3
A1 13 15 17
A2 14 16 18

, , C4

   B1 B2 B3
A1 19 21 23
A2 20 22 24

2.矩阵索引
2.1 矩阵下标
> m <- matrix(1:20,4,5,byrow = T)
> m
     [,1] [,2] [,3] [,4] [,5]
[1,]    1    2    3    4    5
[2,]    6    7    8    9   10
[3,]   11   12   13   14   15
[4,]   16   17   18   19   20
> m[1,3]
[1] 3
> m[2,c(1:3)]
[1] 6 7 8
> m[,3]
[1]  3  8 13 18
> m[-1,2]
[1]  7 12 17
> m
   C1 C2 C3 C4 C5
R1  1  2  3  4  5
R2  6  7  8  9 10
R3 11 12 13 14 15
R4 16 17 18 19 20
> m["R2","C5"] # 通过维度名进行索引
[1] 10
> a <- head(state.x77) # head取对象的first part
> a[,"Income"]
   Alabama     Alaska    Arizona   Arkansas California   Colorado 
      3624       6315       4530       3378       5114       4884 
      
2.2矩阵运算
# 加减法：行列必须一致
> m
   C1 C2 C3 C4 C5
R1  1  2  3  4  5
R2  6  7  8  9 10
R3 11 12 13 14 15
R4 16 17 18 19 20
> colSums(m) # 计算每一列的和
C1 C2 C3 C4 C5 
34 38 42 46 50 
> rowSums(m) # 计算每一行的和
R1 R2 R3 R4 
15 40 65 90 
> colMeans(m) # 计算每一列的均值
  C1   C2   C3   C4   C5 
 8.5  9.5 10.5 11.5 12.5 
> rowMeans(m) # 计算每一行的均值
R1 R2 R3 R4 
 3  8 13 18 
 
 # 矩阵的乘法
 > m*m
    C1  C2  C3  C4  C5
R1   1   4   9  16  25
R2  36  49  64  81 100
R3 121 144 169 196 225
R4 256 289 324 361 400
# 内积
> n <- matrix(1:20,5,4)
> m %*% n
   [,1] [,2] [,3] [,4]
R1   55  130  205  280
R2  130  330  530  730
R3  205  530  855 1180
R4  280  730 1180 1630
# 外积

# 取对角线
> diag(n)
[1]  1  7 13 19

# 转置
> t(m)
   R1 R2 R3 R4
C1  1  6 11 16
C2  2  7 12 17
C3  3  8 13 18
C4  4  9 14 19
C5  5 10 15 20

3. 列表
# 列表是对象的集合，可以是任何数据结构，甚至列表本身

3.1 创建列表
> a <- 1:20
> b <- matrix(1:20,4)
> c <- mtcars
> d <- "This is a test list"
> a;b;c;d
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20
     [,1] [,2] [,3] [,4] [,5]
[1,]    1    5    9   13   17
[2,]    2    6   10   14   18
[3,]    3    7   11   15   19
[4,]    4    8   12   16   20
                     mpg cyl  disp  hp drat    wt  qsec vs am gear carb
Mazda RX4           21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4
Mazda RX4 Wag       21.0   6 160.0 110 3.90 2.875 17.02  0  1    4    4
Datsun 710          22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1
Hornet 4 Drive      21.4   6 258.0 110 3.08 3.215 19.44  1  0    3    1
Hornet Sportabout   18.7   8 360.0 175 3.15 3.440 17.02  0  0    3    2
Valiant             18.1   6 225.0 105 2.76 3.460 20.22  1  0    3    1
Duster 360          14.3   8 360.0 245 3.21 3.570 15.84  0  0    3    4
Merc 240D           24.4   4 146.7  62 3.69 3.190 20.00  1  0    4    2
Merc 230            22.8   4 140.8  95 3.92 3.150 22.90  1  0    4    2
Merc 280            19.2   6 167.6 123 3.92 3.440 18.30  1  0    4    4
Merc 280C           17.8   6 167.6 123 3.92 3.440 18.90  1  0    4    4
Merc 450SE          16.4   8 275.8 180 3.07 4.070 17.40  0  0    3    3
Merc 450SL          17.3   8 275.8 180 3.07 3.730 17.60  0  0    3    3
Merc 450SLC         15.2   8 275.8 180 3.07 3.780 18.00  0  0    3    3
Cadillac Fleetwood  10.4   8 472.0 205 2.93 5.250 17.98  0  0    3    4
Lincoln Continental 10.4   8 460.0 215 3.00 5.424 17.82  0  0    3    4
Chrysler Imperial   14.7   8 440.0 230 3.23 5.345 17.42  0  0    3    4
Fiat 128            32.4   4  78.7  66 4.08 2.200 19.47  1  1    4    1
Honda Civic         30.4   4  75.7  52 4.93 1.615 18.52  1  1    4    2
Toyota Corolla      33.9   4  71.1  65 4.22 1.835 19.90  1  1    4    1
Toyota Corona       21.5   4 120.1  97 3.70 2.465 20.01  1  0    3    1
Dodge Challenger    15.5   8 318.0 150 2.76 3.520 16.87  0  0    3    2
AMC Javelin         15.2   8 304.0 150 3.15 3.435 17.30  0  0    3    2
Camaro Z28          13.3   8 350.0 245 3.73 3.840 15.41  0  0    3    4
Pontiac Firebird    19.2   8 400.0 175 3.08 3.845 17.05  0  0    3    2
Fiat X1-9           27.3   4  79.0  66 4.08 1.935 18.90  1  1    4    1
Porsche 914-2       26.0   4 120.3  91 4.43 2.140 16.70  0  1    5    2
Lotus Europa        30.4   4  95.1 113 3.77 1.513 16.90  1  1    5    2
Ford Pantera L      15.8   8 351.0 264 4.22 3.170 14.50  0  1    5    4
Ferrari Dino        19.7   6 145.0 175 3.62 2.770 15.50  0  1    5    6
Maserati Bora       15.0   8 301.0 335 3.54 3.570 14.60  0  1    5    8
Volvo 142E          21.4   4 121.0 109 4.11 2.780 18.60  1  1    4    2
[1] "This is a test list"
> mlist <- list(a,b,c,d)
# list函数创建列表

3.2 访问列表
# 索引访问
> mlist[1]
[[1]]
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20
> mlist[c(1,2)]
[[1]]
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20

[[2]]
     [,1] [,2] [,3] [,4] [,5]
[1,]    1    5    9   13   17
[2,]    2    6   10   14   18
[3,]    3    7   11   15   19
[4,]    4    8   12   16   20
# 通过向量来索引列表中的多个对象

# 名称访问
> state.center["y"]
$y
 [1] 32.5901 49.2500 34.2192 34.7336 36.5341 38.6777 41.5928 38.6777 27.8744 32.3329 31.7500
[12] 43.5648 40.0495 40.0495 41.9358 38.4204 37.3915 30.6181 45.6226 39.2778 42.3645 43.1361
[23] 46.3943 32.6758 38.3347 46.8230 41.3356 39.1063 43.3934 39.9637 34.4764 43.1361 35.4195
[34] 47.2517 40.2210 35.5053 43.9078 40.9069 41.5928 33.6190 44.3365 35.6767 31.3897 39.1063
[45] 44.2508 37.5630 47.4231 38.4204 44.5937 43.0504

# $访问
# 输入列表名后输入$,会带出列表全部对象的名称，选择后回车即可

# 双[]访问
# []输出的依然是列表（的子集）
# [[]]输出的是对象本身的数据类型

3.2 编辑列表
mlist[[5]] <- iris
# 新增对象，注意双[]

> mlist <- mlist[-5]
> mlist[[4]] <- NULL
# 删除对象
