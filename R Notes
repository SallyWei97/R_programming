# Introduction to R programming language and data analysis----------------------
# Creater: Wei Zheng
# This note is created based on a video, Introduction to R programming language 
# and data analysis, on the website of Bilibili (id: 基因学院).

# P1-6    Introduction of R-----------------------------------------------------

getwd()
# 看路径
setwd(dir="")
修改保存路径

df <- read.table("dataname.cvs", sep=",", header = T)
# df将数据文件命名
# read.table()读写Excel数据文件
# sep=","来表示空格用字符

table(df$supp, df$dose)
# table()用于制作新表格，$用于统计总量
# aggregate()测量均值、方差等

# 内置数据集 粉色
# 数据框 表格图案
# 函数 蓝色
# tab键自动补齐（第一个）

# 快捷键
# Ctrl+↑，调出历史记录（可输入条件后再执行，即可查找符合条件的历史记录
# ESC中断当前操作
# Alt+shift+k，调出所有快捷操作


# P7-14   R的安装--------------------------------------------------------------

# - 用 "<-" 赋值给一个局部变量，不建议使用=
# - 用 "<<-" 赋值给一个全局变量
# - "<-"的快捷键：alt + - 

mean()
# mean(1:5) -> 3 求1-5的平均数
# mean(1,2,3,4,5) -> 1 只输出第一个向量（1）的平均数，后面为无效输入
# mean(c(1,2,3,4,5)) -> 3 增加的c()帮助识别一串数字

ls()
# 列出所有变量

ls.str()
# 列出所有变量的详细信息

str()
# 括号里填写变量名，输出变量的信息

rm()
# 清除某个变量

rm(list = ls())
# 消除所有变量

history()
# 唤出历史

# 清空界面快捷键 Ctrl+L


save.image()
# 保存工作空间（图片不会自动保存）

# R拓展包安装
# - 在线
#   通过访问镜像站点
#   拓展包的名字都需要被引号
    install.package()
    # eg. install.package("vcd")
    install.packages()
    # eg. install.packages(c("a", "b", "c"))
# - 离线（源代码）
#   镜像站点下载源代码
#   需要注意包之间的依赖关系（通常推荐在线安装）

require()
# 加载包（eg. require(vcd)）
library()
# 加载包
# library和require都可以载入包，但二者存在区别。
# 一个函数中，如果一个包不存在，执行到library将会停止执行，require则会继续执行

help(package="")
# 查询该包的指南(eg. help(package="vcd"))
library(help="")
# 查询包的基础信息，如数据集(eg. library(help=""))
# eg. Baseball (vcd自带数据集）

detach() # eg. detach("package:vcd")
# 从内存内移除，重新require即可使用
remove.packages() # eg. remove.packages("vcd")
# 彻底删除包

installed.packages()
# 可用于拓展包移植，
# eg. 
Rpack <- installed.packages()[,1]
# 创建变量Rpack，为当前所有已安装包的名称（第一列）
save(Rpack,file="Rpack.Rdata")
# 保存变量Rpack
load("C:/Users/three/Documents/Rpack.Rdata")
# 加载该变量（需要移植的新电脑）
Rpack
# 查看该变量（需要移植的新电脑）
for (x in Rpack) install.packages(x)
# 使用循环来安装Rpack中所有包（需要移植的新电脑）

# ?函数名（一个问号查函数）eg. 
?mean
# example（）查看函数的example eg.
example(mean)
# vignette() 查看包的说明(部分包没有该格式的intro） eg.
vignette("xts")
# ??函数名（两个问好查拓展包）eg. ??heatmap

apropos()
# 查询括号内的关键字 eg.
apprpos("sum",mod="function")
# 查询关键字为sum的函数

RsiteSearch()
# 官网查询关键字
# 可使用rseek.org网站，需要vpn

# 数据通常行是观测值，列是变量值

# P15 内置数据集 --------------------------------------------------------------

# 内置数据集都存在datasets包
data()
#  输出所有包含的数据集
rivers
eg. 内置数据集-北美河流长度
data("")
#  输出选定数据集 eg. data("rivers")

# 网盘有数据集整理
class()
# 查看数据集的类型(向量、因子、矩阵等

heatmap()
# 绘制数据集的热力图 eg. heatmap(volcano)

data(package=.packages(all.available=TRUE))
# 查找所有可用数据集

data.frame()
# 制作数据框

data(database,package="程序包"）
# 只加载拓展包里面的数据集，忽略包

# P16-26  编程基础概念----------------------------------------------------------------------------------------------------------------------------------------------------------

# 数据类型
# 数值，，逻辑型（布尔），日期型

# 对象
# eg. 常量，数据结构，函数，图形

# 数据结构
# eg. 向量，标量；矩阵；数组；列表；数据框；因子；时间序列

# 1.1 向量 vector---------------------------------------
# 存储数值型字符型等数据的一维数组
# 用函数c()来创建向量（数组）eg.
x <- c(1,2,20,21,22,31,24,44,25,32,27)
y <- c("one","two")
z <- c(TRUE,F,T,F)
# !!字符串必须＋“”
# !!逻辑型必须all大写
c(1:100)
# 1-100等差数列
seq (from=1,to=100,by=4)
seq (from=1,to=100,length.out=8)
# by为等差数列的差，length.out为等差数列个数
rep(x,5)
rep(x,each=5，times=5)
# 重复函数，x可为标量、向量，each是单个重复次数，times是总体重复次数
a <- c(1,2,"three")
# 1,2被转化为字符串
model()
# 查看向量的类型
# ！！R是向量化编程，优势是避免使用循环
> x <- c(1,2)
> y <- c(3,4)
> x*3+y
[1]  6 10
> x[x<2]
[1] 1
> rep(x,c(2,3))
[1] 1 1 2 2 2


# 1.2 向量索引 ---------------------------------------
# 正负整数索引；逻辑向量索引；名称索引

# 正负整数索引
> x <- c(1:100)
> length(x)
[1] 100
> x[10]
[1] 10
> x[-66] # 不显示第66个数
 [1]   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
[18]  18  19  20  21  22  23  24  25  26  27  28  29  30  31  32  33  34
[35]  35  36  37  38  39  40  41  42  43  44  45  46  47  48  49  50  51
[52]  52  53  54  55  56  57  58  59  60  61  62  63  64  65  67  68  69
[69]  70  71  72  73  74  75  76  77  78  79  80  81  82  83  84  85  86
[86]  87  88  89  90  91  92  93  94  95  96  97  98  99 100
> x[c(-10:-90)]
 [1]   1   2   3   4   5   6   7   8   9  91  92  93  94  95  96  97  98
[18]  99 100

# 逻辑索引
> y <- c(1:10)
> y[c(T,F,F,T,T)]
[1]  1  4  5  6  9 10
> y[c(T,F,F,T,T,F,F,T,T,F,F,T,T)]
[1]  1  4  5  8  9 NA NA #NA缺失值
> y[y>7]
[1]  8  9 10
> y[y>6 & y<9]
[1] 7 8
> z <- c("one","two","three","four","five")
> "one" %in% z #判断字符串“one”是否是z的元素，
[1] TRUE
> z[z %in% c("one","five")] #相当于 y[c(T,F,F,F,T)]
[1] "one"  "five"

# 名称索引
> names(y) <- c("one","two","three","four","five","six","seven","eight","nine","ten")
> y
  one   two three  four  five   six seven eight  nine   ten 
    1     2     3     4     5     6     7     8     9    10 
> y["two"]
two 
  2
# 通常用于数组等情景，第一行相当于Excel的列名  
  
# 向量修改-------------------------------------------------------------
> x[101] <- 1000
> x
  [1]    1    2    3    4    5    6    7    8    9   10   11   12   13
 [14]   14   15   16   17   18   19   20   21   22   23   24   25   26
 [27]   27   28   29   30   31   32   33   34   35   36   37   38   39
 [40]   40   41   42   43   44   45   46   47   48   49   50   51   52
 [53]   53   54   55   56   57   58   59   60   61   62   63   64   65
 [66]   66   67   68   69   70   71   72   73   74   75   76   77   78
 [79]   79   80   81   82   83   84   85   86   87   88   89   90   91
 [92]   92   93   94   95   96   97   98   99  100 1000
# 赋值单个向量

> b <- 1:3
> b[c(4:10)] <- c(1,1,2,2,3,3,4)
> b
 [1] 1 2 3 1 1 2 2 3 3 4
# 批量赋值
> b[13] <- 11
> b
 [1]  1  2  3  1  1  2  2  3  3  4 NA NA 11
# 中间为缺失值

> append(x = b,values = 99,after = 5)
 [1]  1  2  3  1  1 99  2  2  3  3  4 NA NA 11
# 插入向量，tab键调出函数参数

rm()
# 删除整个向量
> y <- y[-c(3:5)]
> y
  one   two   six seven eight  nine   ten 
    1     2     6     7     8     9    10 
# 删除某些向量

> y["six"] <- 99
> y
  one   two   six seven eight  nine   ten 
    1     2    99     7     8     9    10 
# 修改某个向量值

# 向量计算------------------------------------------------------------
1.
> x <- 1:5
> x <- x*2
> x
[1]  2  4  6  8 10
> y <- seq(1,20,length.out =5)
> x*y
[1]   2  23  63 122 200
> x**y # 幂运算
[1] 2.000000e+00 2.896309e+03 1.481113e+08 5.917282e+13 1.000000e+20
> y%%x # 求余
[1] 1.00 1.75 4.50 7.25 0.00
> y%/%x # 整除
[1] 0 1 1 1 2
> z <- 1:3
> x+z
[1]  3  6  9  9 12
Warning message: # 长向量个数不是短向量的整数倍
In x + z : longer object length is not a multiple of shorter object length
# 向量的加减乘除

2.
> c(1:3) %in% x
[1] FALSE  TRUE FALSE
# 包含运算符

3.
> x==y
[1] FALSE FALSE FALSE FALSE FALSE
# 等于判断符

4.
> a <- -5:5
> abs(a)
 [1] 5 4 3 2 1 0 1 2 3 4 5
# 取绝对值
> sqrt(a)
 [1]      NaN      NaN      NaN      NaN      NaN 0.000000 1.000000
 [8] 1.414214 1.732051 2.000000 2.236068
# 计算平方根
> log(x = a,base = 2)
 [1]      NaN      NaN      NaN      NaN      NaN     -Inf 0.000000
 [8] 1.000000 1.584963 2.000000 2.321928
# 计算对数
> exp(a)
 [1] 6.737947e-03 1.831564e-02 4.978707e-02 1.353353e-01 3.678794e-01
 [6] 1.000000e+00 2.718282e+00 7.389056e+00 2.008554e+01 5.459815e+01
[11] 1.484132e+02
# 以e为底的指数函数
> ceiling(c(1.22,2.33))
[1] 2 3
# 向上取整
> floor(c(1.22,2.33))
[1] 1 2
# 向下取整
> trunc(c(1.22,2.33))
[1] 1 2
# 去除小数点
> round(c(1.21,2.88,2.18),digits = 1)
[1] 1.2 2.9 2.2
> signif(c(1.21,2.88,2.18),digits=1)
[1] 1 3 2
# 四舍五入 round：digits为小数点后几位。

5.
sin()
cos()
...
# 三角函数计算

6. 统计函数
> vec <- 1:100
> sum(vec)
[1] 5050
> max(vec)
[1] 100
> min(vec)
[1] 1
> range(vec) # 最大值&最小值
[1]   1 100
> mean(vec)
[1] 50.5
> var(vec) # 方差
[1] 841.6667
> sd(vec) # 标准差
[1] 29.01149
> prod(vec) #连乘
[1] 9.332622e+157
> median(vec)
[1] 50.5
> quantile(vec) # 分位数
    0%    25%    50%    75%   100% 
  1.00  25.75  50.50  75.25 100.00 
> quantile(vec,c(0.1,0.8))
 10%  80% 
10.9 80.2 

7.查找向量索引值
> t <- c(1,3,5,7,9,11,13)
> which.max(t)
[1] 7
> which(t==7)
[1] 4
> which(t<mean(t))
[1] 1 2 3
> t[which(t<10)] # 先输出符合条件的索引值，再按索引值输出向量
[1] 1 3 5 7 9

# 2 矩阵 --------------------------------------------------

1.构建矩阵
1.1 matrix
> m <- matrix(1:30,5,6) # 5是nrow行数，6是ncol列数
> m
     [,1] [,2] [,3] [,4] [,5] [,6]
[1,]    1    6   11   16   21   26
[2,]    2    7   12   17   22   27
[3,]    3    8   13   18   23   28
[4,]    4    9   14   19   24   29
[5,]    5   10   15   20   25   30
# 行列数要与向量总数匹配
>  m <- matrix(1:30,5,byrow = T) # 按行分配
> m
     [,1] [,2] [,3] [,4] [,5] [,6]
[1,]    1    2    3    4    5    6
[2,]    7    8    9   10   11   12
[3,]   13   14   15   16   17   18
[4,]   19   20   21   22   23   24
[5,]   25   26   27   28   29   30
> m <- matrix(1:30,5,byrow = F)
> m
     [,1] [,2] [,3] [,4] [,5] [,6]
[1,]    1    6   11   16   21   26
[2,]    2    7   12   17   22   27
[3,]    3    8   13   18   23   28
[4,]    4    9   14   19   24   29
[5,]    5   10   15   20   25   30
# 按列分配
> rnames <- c("R1","R2","R3","R4","R5")
> cnames <- c("C1","C2","C3","C4","C5","C6")
> dimnames(m) <- list(rnames,cnames)
> m
   C1 C2 C3 C4 C5 C6
R1  1  6 11 16 21 26
R2  2  7 12 17 22 27
R3  3  8 13 18 23 28
R4  4  9 14 19 24 29
R5  5 10 15 20 25 30
# 给矩阵行列命名

1.2 dim
> x <- 1:8
> dim(x) <- c(2,2,2)
> x
, , 1

     [,1] [,2]
[1,]    1    3
[2,]    2    4

, , 2

     [,1] [,2]
[1,]    5    7
[2,]    6    8
# dim定义维度，可以是n维

1.3 array
> dim1 <- c("A1","A2")
> dim2 <- c("B1","B2","B3")
> dim3 <- c("C1","C2","C3","C4")
> h <- array(1:24,c(2,3,4),dimnames = list(dim1,dim2,dim3)) # 1:24-矩阵的值; c(2,3,4)-矩阵的维度; dimnames-矩阵的维度名称
> h
, , C1

   B1 B2 B3
A1  1  3  5
A2  2  4  6

, , C2

   B1 B2 B3
A1  7  9 11
A2  8 10 12

, , C3

   B1 B2 B3
A1 13 15 17
A2 14 16 18

, , C4

   B1 B2 B3
A1 19 21 23
A2 20 22 24

2.矩阵索引
2.1 矩阵下标
> m <- matrix(1:20,4,5,byrow = T)
> m
     [,1] [,2] [,3] [,4] [,5]
[1,]    1    2    3    4    5
[2,]    6    7    8    9   10
[3,]   11   12   13   14   15
[4,]   16   17   18   19   20
> m[1,3]
[1] 3
> m[2,c(1:3)]
[1] 6 7 8
> m[,3]
[1]  3  8 13 18
> m[-1,2]
[1]  7 12 17
> m
   C1 C2 C3 C4 C5
R1  1  2  3  4  5
R2  6  7  8  9 10
R3 11 12 13 14 15
R4 16 17 18 19 20
> m["R2","C5"] # 通过维度名进行索引
[1] 10
> a <- head(state.x77) # head取对象的first part
> a[,"Income"]
   Alabama     Alaska    Arizona   Arkansas California   Colorado 
      3624       6315       4530       3378       5114       4884 
      
2.2矩阵运算
# 加减法：行列必须一致
> m
   C1 C2 C3 C4 C5
R1  1  2  3  4  5
R2  6  7  8  9 10
R3 11 12 13 14 15
R4 16 17 18 19 20
> colSums(m) # 计算每一列的和
C1 C2 C3 C4 C5 
34 38 42 46 50 
> rowSums(m) # 计算每一行的和
R1 R2 R3 R4 
15 40 65 90 
> colMeans(m) # 计算每一列的均值
  C1   C2   C3   C4   C5 
 8.5  9.5 10.5 11.5 12.5 
> rowMeans(m) # 计算每一行的均值
R1 R2 R3 R4 
 3  8 13 18 
 
 # 矩阵的乘法
 > m*m
    C1  C2  C3  C4  C5
R1   1   4   9  16  25
R2  36  49  64  81 100
R3 121 144 169 196 225
R4 256 289 324 361 400
# 内积
> n <- matrix(1:20,5,4)
> m %*% n
   [,1] [,2] [,3] [,4]
R1   55  130  205  280
R2  130  330  530  730
R3  205  530  855 1180
R4  280  730 1180 1630
# 外积

# 取对角线
> diag(n)
[1]  1  7 13 19

# 转置
> t(m)
   R1 R2 R3 R4
C1  1  6 11 16
C2  2  7 12 17
C3  3  8 13 18
C4  4  9 14 19
C5  5 10 15 20

3. 列表 --------------------------------------------------
# 列表是对象的集合，可以是任何数据结构，甚至列表本身

3.1 创建列表
> a <- 1:20
> b <- matrix(1:20,4)
> c <- mtcars
> d <- "This is a test list"
> a;b;c;d
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20
     [,1] [,2] [,3] [,4] [,5]
[1,]    1    5    9   13   17
[2,]    2    6   10   14   18
[3,]    3    7   11   15   19
[4,]    4    8   12   16   20
                     mpg cyl  disp  hp drat    wt  qsec vs am gear carb
Mazda RX4           21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4
Mazda RX4 Wag       21.0   6 160.0 110 3.90 2.875 17.02  0  1    4    4
Datsun 710          22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1
Hornet 4 Drive      21.4   6 258.0 110 3.08 3.215 19.44  1  0    3    1
Hornet Sportabout   18.7   8 360.0 175 3.15 3.440 17.02  0  0    3    2
Valiant             18.1   6 225.0 105 2.76 3.460 20.22  1  0    3    1
Duster 360          14.3   8 360.0 245 3.21 3.570 15.84  0  0    3    4
Merc 240D           24.4   4 146.7  62 3.69 3.190 20.00  1  0    4    2
Merc 230            22.8   4 140.8  95 3.92 3.150 22.90  1  0    4    2
Merc 280            19.2   6 167.6 123 3.92 3.440 18.30  1  0    4    4
Merc 280C           17.8   6 167.6 123 3.92 3.440 18.90  1  0    4    4
Merc 450SE          16.4   8 275.8 180 3.07 4.070 17.40  0  0    3    3
Merc 450SL          17.3   8 275.8 180 3.07 3.730 17.60  0  0    3    3
Merc 450SLC         15.2   8 275.8 180 3.07 3.780 18.00  0  0    3    3
Cadillac Fleetwood  10.4   8 472.0 205 2.93 5.250 17.98  0  0    3    4
Lincoln Continental 10.4   8 460.0 215 3.00 5.424 17.82  0  0    3    4
Chrysler Imperial   14.7   8 440.0 230 3.23 5.345 17.42  0  0    3    4
Fiat 128            32.4   4  78.7  66 4.08 2.200 19.47  1  1    4    1
Honda Civic         30.4   4  75.7  52 4.93 1.615 18.52  1  1    4    2
Toyota Corolla      33.9   4  71.1  65 4.22 1.835 19.90  1  1    4    1
Toyota Corona       21.5   4 120.1  97 3.70 2.465 20.01  1  0    3    1
Dodge Challenger    15.5   8 318.0 150 2.76 3.520 16.87  0  0    3    2
AMC Javelin         15.2   8 304.0 150 3.15 3.435 17.30  0  0    3    2
Camaro Z28          13.3   8 350.0 245 3.73 3.840 15.41  0  0    3    4
Pontiac Firebird    19.2   8 400.0 175 3.08 3.845 17.05  0  0    3    2
Fiat X1-9           27.3   4  79.0  66 4.08 1.935 18.90  1  1    4    1
Porsche 914-2       26.0   4 120.3  91 4.43 2.140 16.70  0  1    5    2
Lotus Europa        30.4   4  95.1 113 3.77 1.513 16.90  1  1    5    2
Ford Pantera L      15.8   8 351.0 264 4.22 3.170 14.50  0  1    5    4
Ferrari Dino        19.7   6 145.0 175 3.62 2.770 15.50  0  1    5    6
Maserati Bora       15.0   8 301.0 335 3.54 3.570 14.60  0  1    5    8
Volvo 142E          21.4   4 121.0 109 4.11 2.780 18.60  1  1    4    2
[1] "This is a test list"
> mlist <- list(a,b,c,d)
# list函数创建列表

3.2 访问列表
# 索引访问
> mlist[1]
[[1]]
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20
> mlist[c(1,2)]
[[1]]
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20

[[2]]
     [,1] [,2] [,3] [,4] [,5]
[1,]    1    5    9   13   17
[2,]    2    6   10   14   18
[3,]    3    7   11   15   19
[4,]    4    8   12   16   20
# 通过向量来索引列表中的多个对象

# 名称访问
> state.center["y"]
$y
 [1] 32.5901 49.2500 34.2192 34.7336 36.5341 38.6777 41.5928 38.6777 27.8744 32.3329 31.7500
[12] 43.5648 40.0495 40.0495 41.9358 38.4204 37.3915 30.6181 45.6226 39.2778 42.3645 43.1361
[23] 46.3943 32.6758 38.3347 46.8230 41.3356 39.1063 43.3934 39.9637 34.4764 43.1361 35.4195
[34] 47.2517 40.2210 35.5053 43.9078 40.9069 41.5928 33.6190 44.3365 35.6767 31.3897 39.1063
[45] 44.2508 37.5630 47.4231 38.4204 44.5937 43.0504

# $访问
# 输入列表名后输入$,会带出列表全部对象的名称，选择后回车即可

# 双[]访问
# []输出的依然是列表（的子集）
# [[]]输出的是对象本身的数据类型

3.2 编辑列表
mlist[[5]] <- iris
# 新增对象，注意双[]

> mlist <- mlist[-5]
> mlist[[4]] <- NULL
# 删除对象

4.数据框 --------------------------------------------------
# 类似spss数据集，矩形结构，列必须命名
# 数据可以不是同一种数据类型（字符串，数值，逻辑值等）
# 每一列必须是同一种数据类型

4.1 创建数据框
state <- data.frame(state.area,state.name,state.region)
> state
   state.area     state.name  state.region
1       51609        Alabama         South
2      589757         Alaska          West
3      113909        Arizona          West
4       53104       Arkansas         South
5      158693     California          West
6      104247       Colorado          West
7        5009    Connecticut     Northeast
8        2057       Delaware         South
9       58560        Florida         South
10      58876        Georgia         South
11       6450         Hawaii          West
12      83557          Idaho          West
13      56400       Illinois North Central
14      36291        Indiana North Central
15      56290           Iowa North Central
16      82264         Kansas North Central
17      40395       Kentucky         South
18      48523      Louisiana         South
19      33215          Maine     Northeast
20      10577       Maryland         South
21       8257  Massachusetts     Northeast
22      58216       Michigan North Central
23      84068      Minnesota North Central
24      47716    Mississippi         South
25      69686       Missouri North Central
26     147138        Montana          West
27      77227       Nebraska North Central
28     110540         Nevada          West
29       9304  New Hampshire     Northeast
30       7836     New Jersey     Northeast
31     121666     New Mexico          West
32      49576       New York     Northeast
33      52586 North Carolina         South
34      70665   North Dakota North Central
35      41222           Ohio North Central
36      69919       Oklahoma         South
37      96981         Oregon          West
38      45333   Pennsylvania     Northeast
39       1214   Rhode Island     Northeast
40      31055 South Carolina         South
41      77047   South Dakota North Central
42      42244      Tennessee         South
43     267339          Texas         South
44      84916           Utah          West
45       9609        Vermont     Northeast
46      40815       Virginia         South
47      68192     Washington          West
48      24181  West Virginia         South
49      56154      Wisconsin North Central
50      97914        Wyoming          West

4.2 数据框访问
# 索引访问
# 名称访问（行列名）
# $访问
plot(women$height,women$weight) # 绘制散点图
lm(weight ~ height,data=women)

Call:
lm(formula = weight ~ height, data = women) # 线性回归

Coefficients:
(Intercept)       height  
     -87.52         3.45  
     
# attach加载数据框到R搜索目录
> attach(mtcars)
> disp
 [1] 160.0 160.0 108.0 258.0 360.0 225.0 360.0 146.7 140.8 167.6 167.6 275.8 275.8 275.8 472.0
[16] 460.0 440.0  78.7  75.7  71.1 120.1 318.0 304.0 350.0 400.0  79.0 120.3  95.1 351.0 145.0
[31] 301.0 121.0
# detach取消加载

# with查询
> with(mtcars,{mpg})
 [1] 21.0 21.0 22.8 21.4 18.7 18.1 14.3 24.4 22.8 19.2 17.8 16.4 17.3 15.2 10.4 10.4 14.7 32.4
[19] 30.4 33.9 21.5 15.5 15.2 13.3 19.2 27.3 26.0 30.4 15.8 19.7 15.0 21.4

5. 因子 --------------------------------------------------
# 名义型变量
# 有序型变量 （good,better,best）
# 连续型变量

# 水平值=变量可能的值（除连续型）
# 因子=水平值组成的向量

# 主要用于主成分分析，因子分析，方差分析等

5.1 创建因子
> week <- factor(c("Mon","Tue","Fri"))
> week
[1] Mon Tue Fri
Levels: Fri Mon Tue
> week <- factor(c("Mon","Tue","Fri"),ordered = T, levels = c("Mon","Tue","Fri"))
> week
[1] Mon Tue Fri
Levels: Mon < Tue < Fri
# ordered=T,按levels顺序排序

> fcyl <- factor(mtcars$cyl)
> fcyl
 [1] 6 6 4 6 8 6 8 4 4 6 6 8 8 8 8 8 8 4 4 4 4 8 8 8 8 4 4 4 8 6 8 4
Levels: 4 6 8
> plot(fcyl)
# 绘制的是频率条形图而非散点图

5.2 分割连续型变量
> cut(x = num,breaks = c(seq(0,100,20)))
  [1] (0,20]   (0,20]   (0,20]   (0,20]   (0,20]   (0,20]   (0,20]   (0,20]   (0,20]  
 [10] (0,20]   (0,20]   (0,20]   (0,20]   (0,20]   (0,20]   (0,20]   (0,20]   (0,20]  
 [19] (0,20]   (0,20]   (20,40]  (20,40]  (20,40]  (20,40]  (20,40]  (20,40]  (20,40] 
 [28] (20,40]  (20,40]  (20,40]  (20,40]  (20,40]  (20,40]  (20,40]  (20,40]  (20,40] 
 [37] (20,40]  (20,40]  (20,40]  (20,40]  (40,60]  (40,60]  (40,60]  (40,60]  (40,60] 
 [46] (40,60]  (40,60]  (40,60]  (40,60]  (40,60]  (40,60]  (40,60]  (40,60]  (40,60] 
 [55] (40,60]  (40,60]  (40,60]  (40,60]  (40,60]  (40,60]  (60,80]  (60,80]  (60,80] 
 [64] (60,80]  (60,80]  (60,80]  (60,80]  (60,80]  (60,80]  (60,80]  (60,80]  (60,80] 
 [73] (60,80]  (60,80]  (60,80]  (60,80]  (60,80]  (60,80]  (60,80]  (60,80]  (80,100]
 [82] (80,100] (80,100] (80,100] (80,100] (80,100] (80,100] (80,100] (80,100] (80,100]
 [91] (80,100] (80,100] (80,100] (80,100] (80,100] (80,100] (80,100] (80,100] (80,100]
[100] (80,100]
Levels: (0,20] (20,40] (40,60] (60,80] (80,100]
# breaks:分割方式，可以是向量，数值

6. 缺失数据 --------------------------------------------------
6.1 简单处理
> a <- c(1,NA,2:9)
> sum(a)
[1] NA
> sum(a,na.rm = TRUE)
[1] 45
> mean(a,na.rm = TRUE)
[1] 5
# 使用na.rm移除NA

> is.na(a)
 [1] FALSE  TRUE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
# 使用is.na判断是否有缺失值

> sum(is.na(sleep))
[1] 38
# 统计缺失值个数

> c <- c(1,NA,NA,2:8)
> c
 [1]  1 NA NA  2  3  4  5  6  7  8
> d <- na.omit(c)
> d
[1] 1 2 3 4 5 6 7 8
attr(,"na.action")
[1] 2 3
attr(,"class")
[1] "omit"
# omit函数去除缺失值
# omit去除数据框的缺失值会删除整行（观测值）

6.2 处理缺失值包
# 识别：VIM包
# 删除：行删除omit.na; 配对删除：部分函数有可用选项
# 最大似然估计：mvmle包
# 插补：单个插补：Hmisc包; 多重插补：Mi包，Mice包，amelia包，mitools包

# NaN 不可能的值
# Inf 无穷
is.nan()
is.infinite()

7. 字符串

7.1 简单处理
> nchar("hello world")
[1] 11
# 计算长度
length()
# 计算向量中元素个数

> paste("I","Love","China")
[1] "I Love China"
> paste("I","Love","China",sep="-")
[1] "I-Love-China"
> a1 <- c("Amy","Sally")
> paste(a1,"likes rainbow")
[1] "Amy likes rainbow"   "Sally likes rainbow"
# 合并字符串，sep是分隔符，向量与字符串会挨个合并

> substr(x = month.name,start = 1,stop = 3)
 [1] "Jan" "Feb" "Mar" "Apr" "May" "Jun" "Jul" "Aug" "Sep" "Oct" "Nov" "Dec"
# 提取字符串

toupper()
# 大写字符串
tolower()
# 小写字符串

7.2 特殊处理（正则表达式）

# 正则表达式入门
# 1. [] 允许匹配一组可能出现的字符 eg.[Pp]ython 来查找Python和Python
# 2. - 代表区间 eg.[0-9A-G]匹配0123456789和ABCDEFG
# 3. \ 转义 eg.[\[\]]匹配[]
# 4. ^ 取反 eg. n[^e]匹配n后边不是e的数据
# 5. \w 与任意单词字符匹配，任意单词字符表示 [A-Z]、 [a-z]、[0-9]、_
# 6. \d 与任意数字匹配
# 7. \s 匹配空白字符（空格，tab，换行）
# 8. \b 匹配的是单词的边界 eg. \bcode\b 匹配单纯的code
# 9. 快捷方式取反 eg. \W匹配任意单词字符以外的数据,如+\=等
# 10. ^ 指定字符串的开始 $是结束
# 11. . 代表匹配任何单个字符，只能在[]外
# 12. ? 期望该字符出现零次或一次 eg. favou?r匹配favor和favour
# 13. {N} 表示在它之前的字符组出现N次 eg.\d{4}匹配四位数字
# 14. {M,N} 重复区间，M是下界。
# 默认贪婪模式按N优先匹配，非贪婪需要{M,N}? 
# {1,}表示匹配一个或无数个 
# +等价于{1,}，*等价于{0,}

# 正则表达式进阶
# 1.() 捕获分组 eg. >(.*)< 可以匹配1>hi<1并提取hi
# 2. | 或者条件 eg. (.avi|.mp4|.wmv|.rmvb) 可以提取4种视频格式
# 3. (?:表达式) 非捕获分组
# 4. \N 引用编号为N的分组 eg.(\w)(\w)\2\1 匹配ab ba规则的单词如otto,asffs
# 5. 先行断言 eg. 喜欢(?=你)只能匹配后面是你的"喜欢"，如喜欢你中的"喜欢"; 喜欢(?!你)只能匹配如喜欢我中的"喜欢"
# 6. 后行断言 eg. (?<=我)喜欢只能匹配如"我喜欢你"中的"喜欢"

# 处理首字母大写
# 正则需要使用\\，因为R中\需要转义
temp <- tolower(month.name)
gsub("^(\\w)","\\U\\1",temp,perl = T)

# 分割字符串
strsplit(字符串向量/集, "分隔符") 

# 向量笛卡尔积
A <- 1:3
B <- c("A","B","C")
outer(A,B,FUN = paste)


8. 时间序列 -------------------------------------------------------------------------------------------
a <- as.Date("2021-10-13")
# 生成时间格式数据

seq(as.Date("2020-01-01"),as.Date("2021-01-01"),by=12)
# 生成间隔12天的等差时序

sales <- round(runif(n = 48,min = 50,max = 100))
ts(sales,start = c(2010,5),end = c(2011,4),frequency = 12)
# ts函数生成时序

9. 读取数据 ---------------------------------------------------------------------------------------------------------

patientID <- c(1:4)
admdate <- c("10/15/2019","10/18/2019","10/21/2019","10/24/2019")
age <- c(round(runif(4,min = 20,max = 50)))
diabetes <- c("Type1","Type2","Type3","Type4")
status <- c("Poor","Improved","Excellent","Poor")
data <- data.frame(patientID,admdate,age,diabetes,status)
# 生成数据框
data2 <- data.frame(patientID=character(),admdate=character(),age=numeric(),diabetes=character(),status=character())
data2 <- edit(data2)
# 进入编辑器

# 读取数据库
install.packages("RODBC")
library(RODBC)

turnout <- read.csv("C:/Users/three/Desktop/turnout.csv")
head（turnout） # 读取前6行

x <- read.table("input.txt") # 默认空白分割
x <- read.table("input.csv", sep=",", header = T, skip = 5, nrows = 100, 
                    na.strings = " ") 
# 逗号分割
# 第一行是否为变量名称
# skip的行数
# nrows：总共导入多少行
# 自动转化缺失值
    
read.csv() # 读取csv文件
read.fwf() # fixed width file（固定位置（宽度）的文件）
    
x <- read.table("website", header = T) # 读取网络文件
    
install.packages("XML") # 网络读取数据的包
readHTMLTable
    
install.packages("foreign") # 读取不同软件格式的数据的包，支持spss SAS等软件的格式
help(package = "foreign")
    
# Excel直接复制到剪贴板导入
x <- read.table("clipboard", header = T, sep = "\t") # Windows
x <- read.table(pipe("pbpaste")) # Mac
    
read.table(gzfile("input.txt.gz")) # 读取压缩文件
    
?readLines
readLines("input.csv", n = 5) # n = 返回行数，常用于非常规文件，返回结果为字符串格式

?scan
scan(file,what) # file=文件地址，what指定读取数据类型(字符/文本等)

10. 写入数据 ----------------------------------------------------------------------------------------------------
?write
    write.table(x, file = "x.txt")
    write.table(x, file = "x.csv", sep = "\t", quote = F, append = F, 
                na = "NA", row.names = F)
    # append = F清空源文件（T加在原文件后）
    # quote = F不为字符串添加""
    # row.names = F取消自动添加的行号
    # file= 改为gzfile("xxx")即可生成压缩文件
# foreign包提供写入数据为其他软件格式的函数(部分)
write.csv

11. 读写Excel文件 ------------------------------------------------------------------------------------------------
# Excel文件另存为csv格式
    x <- read.csv()
    
# 复制剪贴板
    x <- read.table(pipe("pbpaste"))
    x <- read.table("clipboard",sep=\t,header=T)
    
# Excel的格式：.xlsx
install.packages("readxl")
library(readxl)
read_excel()
# 读取单页Excel
library(openxlsx)
readWorkbook()
# 读取多sheet页Excel

12. 读写R文件 ------------------------------------------------------------------------------------------------
saveRDS(iris,file = "iris.RDS")
readRDS("iris.RDS")
# RDS储存一个对象

save(iris,iris3,file="C:/Users/three/test.RData")
# RData就是保存时的工作空间，后缀是.RData
# load RData文件时，相同名字的对象会覆盖之前的对象

save.image()
# 保存当前工作空间中的所有对象

P 34-37 数据处理-数据转换 ------------------------------------------------------------------------------------------------

1. 强制转换数据格式

is.data.frame(state.x77)
[1] FALSE
state.x77 <- as.data.frame(state.x77)
is.data.frame(state.x77)
[1] TRUE
# 矩阵转换为数据框

as.matrix(data.frame(state.x77,state.name))
# 数据框转化为矩阵（数字会变为字符）

method(is)
method(as)
# 查看所有判断和转换函数

x <- state.abb
dim(x) <- c(5,10)
# 为向量添加维度即可生成矩阵
as.factor(x)
# 向量转因子
as.list(x)
# 向量转列表
unlist(list)
# 列表转向量

state <- data.frame(x,state.region,state.x77)
y <- state["Nevada",]
unname(y)
# 去除y中的列名

2. 提取部分数据

who <- read.csv("R studio/WHO.csv")
who1 <- who[c(1:20),c(1:10)]
# 向量进行索引
who2 <- who[which(who$Continent==7)]
# which函数进行条件筛选
who3 <- subset(who,who$CountryID<100 &who$CountryID>=50)
# sbuset提取子集

x <- 1:100
sample(x,40,replace = T)
who4 <- who[sample(who$CountryID,10),]
# sample抽样函数，replac=T 有放回抽样

3. 删除数据
mtcars[-1:-10,]
# 负索引删除
mtcars$mpg <- NULL
# 清空指定行/列

4. 添加合并数据框
data.frame(USArrests,state.division)
cbind(USArrests,state.division)
# 合并列
data1 <- head(USArrests,20)
data2 <- head(USArrests,20)
rbind(data1,data2)
# 合并行（列名需要一致）

5. 剔除重复值
data1 <- head(USArrests,30)
data2 <- tail(USArrests,30)
data4 <- rbind(data1,data2) # 此时有重复的行
duplicated(data4) # 判断重复值
data4[!duplicated(data4),] # !表示剔除重复值（类似负索引）
# 使用索引+duplicated
rownames(data4[!duplicated(data4),])
length(rownames(data4[!duplicated(data4),]))

unique(data4)
# 使用unique直接剔除

6. 转置颠倒
sractm <- t(mtcars) # 转置
rev(letters) # 向量颠倒
women[rev(rownames(women)),] # 行颠倒

7. 数据加减
women$height*2.54
data.frame(women$height*2.54,women$weight)
# 将height转换为cm为单位

transform(women,height=height*2.54)
transform(women,height.cm=height*2.54)
# 使用transform进行转换

8. 数据框的排序
# sort 向量排序
sort(rivers,decreasing = T) # 默认decreasing=F，从小到大
mtcars[sort(rownames(mtcars)),] # 通过排序行，来对数据框排序
order(rivers) # order返回向量的位置
mtcars[order(mtcars$mpg),] # 排序数据框更方便，倒序可设置decreasing = T
mtcars[order(mtcars$mpg,mtcars$disp),] # 多条件排序

9. 数据框求和取均值及分类等
worldPhones <- as.data.frame(WorldPhones)
rs <- rowSums(worldPhones)
cm <- colMeans(worldPhones)
total <- cbind(worldPhones,total=rs)
rbind(total,mean=cm)

# apply系列函数

# apply for dataframe, matrix
apply(data, MARGIN = 1, FUN = sum()) # MARGIN = 1->行
apply(data, MARGIN = 2, FUN = mean()) # MARGIN = 2->列

# lapply for list
lapply(list, FUN = length()) 

# sapply for vector, matrix

# tapply for factor
tapply(state.name, state.division, FUN = length) # 第二个是因子，也是分类条件，length是求集合中元素的个数

10. 数据中心化和标准化
# 中心化 x-mean(x) center
# 标准化 （x-mean()x）/sd(x) scale
scale(x = state.x77,center = T,scale = T)
heatmap(scale(x = state.x77,center = T,scale = T))

P38-40 reshape2，tidyr，dplyr ------------------------------------------------------------------------------------------------

1. reshape2
# merge 合并同类项
x <- data.frame(k1=c(NA,NA,3,4,5),k2=c(1,NA,NA,4,5),data=1:5)
y <- data.frame(k1=c(NA,2,NA,4,5),k2=c(NA,NA,3,4,5),data=1:5)
merge(x,y,by = "k1")
merge(x,y,by = "k2",incomparables = T) # NA的情况两两组合
merge(x,y,by=c("k1","k2"))

# reshape 揉数据
melt(airquality) #融合数据，将宽数据变为长数据
aql <- melt(airquality,id.vars = c("month","day")) #以月份+日期作为id
aqw <- dcast(data = aql,formula = month+day~variable) # 长变宽：month+day作为id，variable列的各个factor作为新的列名
aqw <- dcast(aql,formula = month ~variable,fun.aggregate = sum,na.rm=T) # 以month为id汇总，值为各个day的求和

2. tidyr
# 揉数据gather 
tdata <- mtcars[1:10,1:3]
tdata <- data.frame(names=rownames(tdata),tdata)
gather(tdata,key = "KEY",value = "VALUE",mpg:disp)
# 宽变长
gdata <- gather(tdata,key = "KEY",value = "VALUE",mpg:disp)
spread(gdata, key = "KEY", value = "VALUE")
# 长变宽

# 分列及合并
df <- data.frame(x=c(NA,"a.b","a.c","b.a"))
separate(df,col = x,into = c("A","B")) # 默认识别分隔符
df2 <- data.frame(x=c(NA,"a.b-c","a-c","b-a"))
separate(df2,col = x,into = c("A","B"),sep="-") # 指定分隔符
x <- separate(df2,col = x,into = c("A","B"),sep="-")
unite(x,col = "AB", A,B,sep = "+") #指定连接符，合并

3. dplyr
# 剔除数据
dplyr::filter(iris,Sepal.Length>7) #过滤掉不符合后面逻辑的行
dplyr::distinct(rbind(data[1:10,], data[1:15,])) # distinct去掉重复的行

# 抽取数据
dplyr::slice(data, 10:15) # 取出数据指定行
dplyr::sample_n(data, n) # 随机取出n行
dplyr::sample_frac(data, 0.1) # 按比例随机取出行
dplyr::slice_sample(data) # 随机取1行

# 数据排序
dplyr::arrange(data, c2) # 按照某一列的大小来排序（从小到大）
dplyr::arrange(data, desc(c2)) # 按照某一列相反的大小来排序（从大到小）

# 数据提取（变量）
dplyr::select()

# 数据统计
summarise(data, avg = mean(c2))
summarise(data, sum = sum(c2))

# 链式操作符 %>%（管道）快捷键：Ctrl+shift+M
# 相当于“然后”
dplyr::group_by(data, c5) # 通过制定列的因子来进行分组，每一种因子为一组。
data %>% group_by(c5) # 另一种写法
data %>% group_by(c5) %>% summarise(avg = mean(c2)) %>% arrange((avg))
# 先分组，再算平均值，再排序

# 添加变量
dplyr::mutate(data, new=c2+c3) # 加新的一列，并添加逻辑

# 双表格合并
a <- data.frame(x1 = c("A","B","C"), x2 = c(1,2,3))
b <- data.frame(x1 = c("A","B","D"), x2 = c(T,F,T))
dplyr::left_join(a,b,by="x1") # 左连接，x1以a为准
dplyr::right_join(a,b,by="x1") # 右连接，x1以b为准
dplyr::full_join(a, b, by="x1") # 取x1的并集
dplyr::semi_join(a, b, by="x1") # 取x1的交集
dplyr::anti_join(a, b, by="x1") # 取a与b不同的x1
  x1 x2
1  C  3

first <- dplyr::slice(mtcars,1:5)
second <- dplyr::slice(mtcars,3:8)
dplyr::intersect(first,second) # 取交集
dplyr::union_all(first,second) # 取并集
dplyr::setdiff(first,second) # 取second的补集
